# 代码管理相关知识点
## Git
### 概念

Git是当前最先进、最主流的**分布式**版本控制系统，免费、开源！核心能力就是**版本控制**。再具体一点，就是面向代码文件的版本控制，代码的任何修改历史都会被记录管理起来，意味着可以恢复到到以前的任意时刻状态。

### 三个区域的概念

#### 工作区

**电脑里能看到的代码库目录，新增文件、修改文件内容，或删除文件。**

#### 暂存区

**临时存放文件的修改，实际上是一个文件，保存待提交的文件列表信息，将工作区的修改保存到暂存区。**

~~~
git add  //暂存
git commit  //提交到本地仓库
~~~

#### 版本库

**Git的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。**

~~~
git push  //推送到远程仓库
~~~

### 仓库的概念

存储和管理项目代码及版本历史的数据库，分为 **本地仓库** 和 **远程仓库**。

**本地仓库**：存储在开发者计算机上的项目目录中（包含隐藏的 `.git` 文件夹），记录所有文件变更、提交历史、分支等信息。开发者可以在本地进行代码修改、提交、版本回退等操作，无需网络连接。

**远程仓库**：托管在服务器（如 GitHub、GitLab 等）上的共享仓库，用于团队协作和代码备份。开发者通过推送（`push`）本地更改到远程仓库或拉取（`pull`）他人更新，实现代码同步。

### 节点的概念

构成项目历史的基本单元，每个节点代表一次完整的代码提交。哈希值进行唯一标识，形成一条不可篡改的时间链。每次提交时，Git会创建一个新的节点，该节点会记录以下核心信息：**当前工作目录的快照**、**提交者的信息**以及**指向父节点的指针**。对于普通提交，节点只有一个父节点；而合并提交（Merge Commit）则会包含两个或多个父节点，形成分支合并的历史记录。

### 分支的概念

分支是从主线分离出去的“**副本**”，每个分支代表一段独立的开发历史，允许开发者在隔离环境中并行开展工作而不会干扰主线代码，**非线性开发**，默认分支为**master**，建立分支是在**基于当前的分支创建的**。

## Source Tree

免费的 Git 和 Hg **图形化客户端管理工具**。核心功能包括**仓库克隆、提交管理、分支操作、合并冲突解决**等常见版本控制任务，所有操作都通过清晰的界面按钮和菜单完成，大大降低了使用门槛。仓库视图展示**本地**和**远程仓库**列表，提交历史图谱以图形化方式清晰呈现分支结构和版本演进，文件状态面板则实时监控工作目录的变更情况。

### 仓库相关操作

- 创建本地仓库：**Create a repository**

![](./SourceTree.assets/%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BA%93.png)

- 打开本地仓库：**将本地或远程的 Git 仓库导入到 SourceTree 中进行管理(Add)**

![](./SourceTree.assets/%E6%89%93%E5%BC%80%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png)

- 克隆远程仓库：**Clone**
  - ![](./SourceTree.assets/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%85%8B%E9%9A%86.png)
- 获取：**远程仓库的更新同步到本地仓库，但不会自动合并到本地工作副本。**
  - ![](./SourceTree.assets/%E8%8E%B7%E5%8F%96.png)
- 关联远程仓库
<<<<<<< Updated upstream
  - ![](./SourceTree.assets/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94.png)
=======
  
  ![](./SourceTree.assets/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94.png)
>>>>>>> Stashed changes

### 节点相关操作

#### 提交

**将暂存区的文件提交到本地仓库中**

* ![](./SourceTree.assets/%E6%8F%90%E4%BA%A4.png)

#### 重置

**是指将改动的代码提交到本地仓库后，并未推送到远端仓库的时候**

<<<<<<< Updated upstream
* ![](./SourceTree.assets/%E9%87%8D%E7%BD%AE.png)
=======
| 重置类型          | 工作目录状态 | 暂存区状态   | 适用场景                                                   |
| :---------------- | :----------- | :----------- | :--------------------------------------------------------- |
| Soft（软重置）    | 保留更改     | 保留更改     | 希望保留所有改动并重新组织提交时使用。                     |
| Mixed（混合重置） | 保留更改     | 不保留更改   | 需要撤销暂存区改动但保留工作目录内容时使用。               |
| Hard（硬重置）    | 丢弃所有更改 | 丢弃所有更改 | 完全恢复到目标提交的状态，适合确定不再需要当前改动的情况。 |

1. 在暂存并提交后，想撤销提交就需要进行重置。
2. 重置时需要选取重置到的节点

![](./%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E7%82%B9/%E9%87%8D%E7%BD%AE.png)

3. 此时文件会回到暂存状态

![](./%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E7%82%B9/%E5%9B%9E%E5%88%B0%E6%9A%82%E5%AD%98%E7%8A%B6%E6%80%81.png)
>>>>>>> Stashed changes

#### 回滚提交

**是指将改动的代码提交到本地仓库，但已经推送到远端仓库的时候**

<<<<<<< Updated upstream
=======
1. 修改文件之后，选择暂存文件，然后提交文件，最后推送文件。
2. 文件已经推送到远端仓库后，发现错误需修改，这时候就需要进行回滚并提交。

![](./%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E7%82%B9/%E5%9B%9E%E6%BB%9A%E5%B9%B6%E6%8F%90%E4%BA%A4.png)

3. 再次推送，这次是回滚提交记录，远端仓库和本地仓库的文件就会返回到修改文件之前的转态。

>>>>>>> Stashed changes
* ![](./SourceTree.assets/%E5%9B%9E%E6%BB%9A.png)

#### 分支相关操作

- 新建分支
  
  ![](./SourceTree.assets/%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF.png)
  
- 合并分支
  
  ![](./SourceTree.assets/%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png)
  
- 删除分支
  
  ![](./SourceTree.assets/%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF.png)
  
- 切换分支：双击分支即可。
  
  ![](./SourceTree.assets/%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png)
  
- 制造冲突：**不同人修改同一文件推送导致版本冲突**（在GitHub上修改远程仓库文件，模拟一个人操作；在SourceTree本地修改同一文件，模拟另一个人操作）
  
  ![](./SourceTree.assets/%E5%8F%91%E7%94%9F%E5%86%B2%E7%AA%81.png)
  
- 解决冲突： **合并冲突**
  
  ![](./SourceTree.assets/%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png)
  
  

#### 拉取

**将远程仓库的更新同步到本地仓库，并自动合并到本地工作副本。**

![](./SourceTree.assets/%E6%8B%89%E5%8F%96.png)

#### 推送

**将本地仓库的文件代码推送到远程仓库中**

![](./SourceTree.assets/%E6%8E%A8%E9%80%81.png)

#### 其他

##### 书写忽略文件

<<<<<<< Updated upstream
**设置→高级→编辑**（以斜杠"/"开头表示目录；以星号"*"通配多个字符；以问号"?"通配单个字符；以方括号"[]"包含单个字符的匹配列表；以叹号"!"表示不忽略(跟踪)匹配到的文件或目录；）
=======
1. **设置→高级→编辑**（以斜杠"/"开头表示目录；以星号"*"通配多个字符；以问号"?"通配单个字符；以方括号"[]"包含单个字符的匹配列表；以叹号"!"表示不忽略(跟踪)匹配到的文件或目录；）

2. **作用**：当上传修改项目时，某个工程内容涉及机密则会不会对这个文件内容进行上传。
>>>>>>> Stashed changes

![](./SourceTree.assets/%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6.png)

##### 停止跟踪

![](./SourceTree.assets/%E5%8F%96%E6%B6%88%E8%B7%9F%E8%B8%AA.png)

##### 创建补丁

<<<<<<< Updated upstream
记录代码的变更（新增、修改、删除的内容），并可以在不同分支或仓库之间应用这些变更。
=======
**记录代码的变更（新增、修改、删除的内容），并可以在不同分支或仓库之间应用这些变更。**
>>>>>>> Stashed changes

![](./SourceTree.assets/%E5%88%9B%E5%BB%BA%E8%A1%A5%E4%B8%81.png)

##### 应用补丁

<<<<<<< Updated upstream
右键点击补丁文件，选择“应用”选项。Sourcetree会自动将补丁应用到当前的代码库中。

##### 贮藏

对现在的更改进行备份，注意仅仅是对更改进行备份
=======
**右键点击补丁文件，选择“应用”选项。Sourcetree会自动将补丁应用到当前的代码库中。**

##### 贮藏

1. **未暂存阶段**。

2. **对现在的更改进行备份，注意仅仅是对更改进行备份**。
>>>>>>> Stashed changes

![](./SourceTree.assets/%E8%B4%AE%E8%97%8F.png)

##### 丢弃

<<<<<<< Updated upstream
**撤销本地未提交的更改**
=======
**撤销本地未提交的更改，回到未修改状态**。
>>>>>>> Stashed changes

![](./SourceTree.assets/%E4%B8%A2%E5%BC%83.png)

##### 移除

<<<<<<< Updated upstream
直接删除文件
=======
**直接删除文件，包括之前的修改**。
>>>>>>> Stashed changes

![](./SourceTree.assets/%E7%A7%BB%E9%99%A4.png)

##### 创建标签

![](./SourceTree.assets/%E8%AE%BE%E7%BD%AE%E6%A0%87%E7%AD%BE.png)

##### 删除标签

![](./SourceTree.assets/%E5%88%A0%E9%99%A4%E6%A0%87%E7%AD%BE.png)

#### 综合

<<<<<<< Updated upstream
![](./SourceTree.assets/%E7%BB%BC%E5%90%88.png)
=======
![](./%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E7%82%B9/%E7%BB%BC%E5%90%88.png)
>>>>>>> Stashed changes
